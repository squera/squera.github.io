<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Marco Patrignani</title>
    <link>https://squera.github.io/courses/</link>
    <description></description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://squera.github.io/courses/index.xml" rel="self" type="application/rss+xml" />
      <item>
        <title>Advanced Programming 2022-23</title>
        <link>https://squera.github.io/courses/ap-22-23/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://squera.github.io/courses/ap-22-23/</guid>
        <description>By prof. Marco Patrignani
General Course Information This Advanced Programming course has two goals: (1) making you well-versed in a novel, advanced programming language, and (2), making you capable of developing large projects without relying solely on your code. Thus, the course will first present the Rust programming language, and then it will have a major W3C-style class-wide project.
The first part of the class will be more Rust-focussed, while the latter one will be more project-focussed, with working group meetings and the software fair.</description>
      </item>
    
      <item>
        <title>CS358 2020-2021</title>
        <link>https://squera.github.io/courses/cs350-20-21/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://squera.github.io/courses/cs350-20-21/</guid>
        <description>CS350: SECURE COMPILATION By prof. Marco Patrignani
Below you will find the following information for the course:
&amp;ndash; general course information,
&amp;ndash; prerequisites and interest,
&amp;ndash; location and timeslots,
&amp;ndash; evaluation and grading,
&amp;ndash; high-level syllabus outline,
&amp;ndash; class and lecture outline.
Some entries are still TBD, please contact the instructor if you have questions.
PIAZZA, CANVAS AND OTHER LINKS: Canvas: https://canvas.stanford.edu/courses/135723
Piazza: https://piazza.com/class/kmewl9o18oi3je
Gradescope: https://www.gradescope.com/courses/255564 (find the code in Piazza)</description>
      </item>
    
      <item>
        <title>CS358 2020-2021</title>
        <link>https://squera.github.io/courses/cs358-20-21/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://squera.github.io/courses/cs358-20-21/</guid>
        <description>CS358: PROGRAMMING LANGUAGE FOUNDATIONS By profs. Marco Patrignani and Marco Vassena
General Course Information How can programming language designers ensure that programmers know exactly what their programs do? Programming language (PL) theory can help answer this and similar questions precisely.
In this course, we study fundamental concepts of PL theory that are essential to the design and specification of programming languages. We will learn how to formalize fundamental concepts such as program syntax, semantics, and type systems, starting from a minimal language (lambda calculus), which we will then extend progressively with more advanced features (algebraic data types, heaps, recursion, and polymorphism) typical of many existing programming languages.</description>
      </item>
    
      <item>
        <title>Programming Languages Semantics 2022-2023</title>
        <link>https://squera.github.io/courses/sem-22-23/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://squera.github.io/courses/sem-22-23/</guid>
        <description>By prof. Marco Patrignani
General Course Information How can programming language designers ensure that programmers know exactly what their programs do? Programming language (PL) theory can help answer this and similar questions precisely.
In this course, we study fundamental concepts of PL theory that are essential to the design and specification of programming languages. We will learn how to formalize fundamental concepts such as program syntax, semantics, and type systems, starting from a minimal language (lambda calculus), which we will then extend progressively with more advanced features (algebraic data types, heaps, recursion, and polymorphism) typical of many existing programming languages.</description>
      </item>
    
      <item>
        <title>Programming Languages Semantics 2023-2024</title>
        <link>https://squera.github.io/courses/sem-23-24/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://squera.github.io/courses/sem-23-24/</guid>
        <description>By prof. Marco Patrignani
General Course Information How can programming language designers ensure that programmers know exactly what their programs do? Programming language (PL) theory can help answer this and similar questions precisely.
In this course, we study fundamental concepts of PL theory that are essential to the design and specification of programming languages. We will learn how to formalize fundamental concepts such as program syntax, semantics, and type systems, starting from a minimal language (lambda calculus), which we will then extend progressively with more advanced features (algebraic data types, heaps, recursion, and polymorphism) typical of many existing programming languages.</description>
      </item>
    
      <item>
        <title>Programming Languages Semantics 2024-2025</title>
        <link>https://squera.github.io/courses/sem-24-25/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://squera.github.io/courses/sem-24-25/</guid>
        <description>By prof. Marco Patrignani
General Course Information How can programming language designers ensure that programmers know exactly what their programs do? Programming language (PL) theory can help answer this and similar questions precisely.
In this course, we study fundamental concepts of PL theory that are essential to the design and specification of programming languages. We will learn how to formalize fundamental concepts such as program syntax, semantics, and type systems, starting from a minimal language (lambda calculus), which we will then extend progressively with more advanced features (algebraic data types, heaps, recursion, and polymorphism) typical of many existing programming languages.</description>
      </item>
    
  </channel>
</rss>